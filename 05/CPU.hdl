// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:  
   	                                              
   	//This updates the instruction with the type, if Type A the optcode part of the insturctions
   	//will be set to 0 only loading the adress into register A
   	//Assembly: @17 A = 17
   	//If Type B insturction optcodes get transfered to the inidiuval components unchanged  
   	Mux16(a = false, b = true, sel = instruction[15], out = ToF);
   	And16(a = ToF, b = instruction, out[0] = j3, out[1] = j2, out[2] = j1, out[3] = writeM,
   	 	  out[4] = int4, out[5] = loadA, out[6] = no, out[7] = f, out[8] = ny, out[9] = zy,
   	 	  out[10] = nx, out[11] = zx, out[12] = AorM, out[13] = int13, out[14] = int14, 
   	 	  out[15] = AorC);
   	                         
   	//Depending on insturction A or C not of AorC or loadA will load memory into Register A
   	Not(in = AorC, out = typeA);   
   	Or(a = typeA, b = loadA, out = aRegLoad);
   	
   	//Picks either the A type instruction or the output of ALU              
   	Mux16(a = instruction, b  = ALUOut, sel = instruction[15], out = aRegIn);
   	
   	//Register A, takes in the output from the Mux and either saves it or ignores it
   	ARegister(in = aRegIn, load = aRegLoad, out = aRegOut, out[0..14] = addressM);
   	
   	//Register D, takes the output from the ALU and either saves it or ignores it
   	DRegister(in = ALUOut, load = int4, out = dRegOut);     
   	                         
   	//ALU Mux, choose to use either aRegOut or Memory                                           
   	Mux16(a = aRegOut, b  = inM, sel = AorM, out = ALUaIn);
   	                                                                
   	//ALU takes in the D register output, and either A register or Memory then performs an operation
   	//Based on the instruction instruction[6..11] if we have C Type instruction otherwise it does nothing
   	ALU(x = dRegOut, y = ALUaIn, zx = zx, nx = nx, zy = zy, ny = ny, f = f, no = no, out = outM, out = ALUOut, zr = zr, ng = ng);
   	   
   	//Custuom made JMP logic unit using optcode from insturction[0..2] and ng and zr flags to deterim the type
   	//of comparison neceassary for JMP
   	JMP(j1 = j1, j2 = j2, j3 = j3, ng = ng, zr = zr, out = PCLoad);  
   	     
   	//It set to always increment unless changed by the load or reset input, takes in aRegOut in case of a jump	    
    PC(in = aRegOut, load = PCLoad, inc = true, reset = reset, out[0..14] = pc);
   	
}