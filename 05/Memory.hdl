// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */
                    
//If Ad[13] = 0
//	Access RAM16K 
//Else If Ad[13] = 1 and Ad[12] =  0
//	Access Screen
//Else IF Ad[13] = 1 and Ad[12] = 1 
// 	Access Keyboard
//Else
//	Invlaid send 0

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here: 
 
 	//Looks at last address bit if 0 it's in the range 0x0000 - 0x3FFF, then ands it with load to see if we save the input 
    Not(in = address[14], out = Address14Not);
    And(a = Address14Not, b = load, out = RAMLoad);
         
   	//Reads and write to RAM 
   	RAM16K(in = in, address = address[0..13], load = RAMLoad, out = RAMOut);
   	                                     
   	//Looks at last address bit if 0 it's in the range 0x4000 - 0x5FFF, then ands it with load to see if we save the input 
   	Not(in = address[13], out = Address13Not);
   	And(a = Address13Not, b = address[14], out = ScreenLoadPart);  
   	And(a = ScreenLoadPart, b = load, out = ScreenLoad);      
   
   	//Screen only get written to if adress[12] = 0 and address[13] = 1 and load is 1
   	Screen(in = in, address = address[0..12], load = ScreenLoad, out = outScreen);
   	           
   	//Gets the input from Keyboard 
   	Keyboard(out = outKeyboard);         
	
	//Always saves to the Register 
    Register(in = outKeyboard, load = true, out = KeyboardOut); 	    
	                      
	//Checks if we're on x6000 address so we can output from that register 
	And(a = address[14], b = address[13], out = KeyboardLoadPart);     
	
	//When address[14] = 0 output RAMOut else output 0
   	Mux16(a = false, b = RAMOut, sel = Address14Not, out = outPartOne);
   	Mux16(a = outPartOne, b = outScreen, sel = ScreenLoadPart, out = OutPartTwo);
   	Mux16(a = OutPartTwo, b = KeyboardOut, sel = KeyboardLoadPart, out = out);
   	

}