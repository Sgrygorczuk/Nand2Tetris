// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/RAM64.hdl

/**
 * Memory of 64 registers, each 16 bit-wide. Out holds the value
 * stored at the memory location specified by address. If load==1, then 
 * the in value is loaded into the memory location specified by address 
 * (the loaded value will be emitted to out from the next time step onward).
 */

CHIP RAM64 {
    IN in[16], load, address[6];
    OUT out[16];

    PARTS:
    // Put your code here:     
    //Load and address 3-5 tell which one of the RAM8 to turn on         
   	// 111 | 000 First three tell which set of RAM to look at next three tell which Register to look at in the RAM8 
    DMux8Way(in = load, sel = address[3..5], a = A, b = B, c = C, d = D, e = E, f = F, g = G, h = H);
    
    
    RAM8(in = in, load = A, address = address[0..2], out = out8);
    RAM8(in = in, load = B, address = address[0..2], out = out16);
    RAM8(in = in, load = C, address = address[0..2], out = out24);
    RAM8(in = in, load = D, address = address[0..2], out = out32);
    RAM8(in = in, load = E, address = address[0..2], out = out40);   
    RAM8(in = in, load = F, address = address[0..2], out = out48);  
    RAM8(in = in, load = G, address = address[0..2], out = out56);  
    RAM8(in = in, load = H, address = address[0..2], out = out64);
            
    
    //Reads only the output from the current address                                                                     
    Mux8Way16(a = out8, b = out16, c = out24, d = out32, e = out40, f = out48, g = out56, h = out64, sel = address[3..5], out = out);   
}